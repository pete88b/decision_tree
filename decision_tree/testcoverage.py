# AUTOGENERATED! DO NOT EDIT! File to edit: 80_test_coverage.ipynb (unless otherwise specified).

__all__ = ['write_imports', 'write_test_cell_callback', 'write_test_cells', 'notebook2testscript']

# Cell
from nbdev.export import *
from nbdev.imports import *

# Cell
def write_imports(test_file,exports):
    "write import statements to the test script for all modules exported to by the nb we're converting"
    # export is None if cell doesn't have an nbdev export flag (%nbdev_export, %nbdev_export_internal ...)
    for export in {export[0] for export in exports if export}:
        export_parts=export.split('.')
        b=export_parts.pop()
        export_parts.insert(0,Config().lib_name)
        a='.'.join(export_parts)
        test_file.write(f"""
from {a} import {b}
for o in dir({b}):
    exec(f'from {a}.{b} import {{o}}')
        """)

# Cell
def write_test_cell_callback(i,cell,export,code):
    "Return the code to be written to the test script or `None` to not write anything for `cell`"
    things_to_exclude = ['notebook2script','show_doc']
    if export: return None # if it's exported to the library, don't add to test script
    for thing_to_exclude in things_to_exclude: # TODO: make this better
        if thing_to_exclude in code: return None
    return re.sub(r'^\s*(%|!)', r'#\1', code, flags=re.MULTILINE)

# Cell
def write_test_cells(test_file,nb,exports):
    "Writes the source of code cells to the test script"
    sep = '\n'* (int(Config().get('cell_spacing', '1'))+1)
    cells = [(i,c,e) for i,(c,e) in enumerate(zip(nb['cells'],exports)) if c['cell_type']=='code']
    for i,c,e in cells:
        code_lines = split_flags_and_code(c)[1]
        code = sep + '\n'.join(code_lines)
        code = re.sub(r' +$', '', code, flags=re.MULTILINE)
        code = write_test_cell_callback(i,c,e,code)
        if code: test_file.write(code)

# Cell
def notebook2testscript():
    "Convert notebooks to test scripts"
    test_path=Path(str(Config().lib_path)+'_test')
    test_path.mkdir(parents=True, exist_ok=True)
    for old_file in test_path.glob('test_*.py'): old_file.unlink()
    print('Removed all test_*.py files from',test_path)
    files = [f for f in Config().nbs_path.glob('*.ipynb') if not f.name.startswith('_')]
    for nb_file in sorted(files):
        test_file_name = test_path/f'test_{nb_file.stem.replace("-","_")}.py'
        print('Converting', nb_file.name, 'to\n  ', test_file_name)
        file_path = os.path.relpath(nb_file, Config().config_file.parent).replace('\\', '/')
        with open(test_file_name, 'w', encoding='utf8') as test_file:
            test_file.write(f"# AUTOGENERATED! DO NOT EDIT! File to edit: {file_path} (unless otherwise specified).\n")
            nb=read_nb(nb_file)
            default_export=find_default_export(nb['cells'])
            exports = [is_export(c, default_export) for c in nb['cells']]
            write_imports(test_file,exports)
            write_test_cells(test_file,nb,exports)
    print('Writing',test_path/'run_all.py')
    with open(test_path/'run_all.py', 'w', encoding='utf8') as run_all_file:
        for nb_file in sorted(files): run_all_file.write(f'import test_{nb_file.stem.replace("-","_")}\n')

# Cell
if __name__ == "__main__" and not IN_NOTEBOOK:
    notebook2testscript()